!function (e) {
    "use strict";

    function n(e, r, t) {
        (e.JsValidator = this).settings = {
            onAir: !0,
            showErrors: !0,
            autoHideErrors: !1,
            autoHideErrorsTimeout: 2e3,
            locale: "en",
            messages: {},
            rules: {},
            errorClassName: "error",
            removeSpaces: !1,
            autoTracking: !0,
            eventsList: ["keyup", "change", "blur"]
        };
        var i = this;
        return this.formHandle = e || null, this.submitCallback = r || null, this.fields = this.getFields(this.formHandle.querySelectorAll("[data-rule]")), this.applySettings(t || {}), this.submitCallback = this.submitCallback.bind(this), this._eventChangeWithDelay = this._eventChangeWithDelay.bind(this), this._eventChange = this._eventChange.bind(this), this._eventSubmit = this._eventSubmit.bind(this), this.submitCallback && this.eventsBuilder("addEventListener"), this.settings.autoTracking && "MutationObserver" in window && new MutationObserver(function (e) {
            [].forEach.call(e, function (e) {
                switch (e.type) {
                    case"subtree":
                    case"childList":
                        var r = !1, t = [];
                        [].forEach.call(e.addedNodes, function (e) {
                            t = e.querySelectorAll ? e.querySelectorAll("*") : [], -1 !== ["SELECT", "INPUT", "TEXTAREA", "CHECKBOX", "RADIOBUTTON"].indexOf(e.tagName) && (r = !0), r || [].forEach.call(t, function (e) {
                                -1 !== ["SELECT", "INPUT", "TEXTAREA", "CHECKBOX", "RADIOBUTTON"].indexOf(e.tagName) && (r = !0)
                            })
                        }), r && i.reload()
                }
            })
        }).observe(this.formHandle, {childList: !0, subtree: !0}), this
    }

    var s = ["validate", "formatString", "destroy", "reload", "getFormHandle", "getFields", "showErrors", "hideErrors"];
    n.prototype = {
        messages: {
            en: {
                required: {empty: dilparametreleri._bualanidolurmakzorunlu, incorrect: dilparametreleri.gecersizbilgi},
                notzero: {empty: dilparametreleri.lutfenbirsecimyapin, incorrect: dilparametreleri.gecersizbilgi},
                integer: {empty: dilparametreleri._bualanidolurmakzorunlu, incorrect: dilparametreleri.gecersizbilgi},
                float: {
                    empty: dilparametreleri.birsayigirmenizgerekmektedir,
                    incorrect: dilparametreleri.gecersizbilgi
                },
                min: {empty: dilparametreleri.cokazkaraktergirdiniz, incorrect: dilparametreleri.cokazkaraktergirdiniz},
                max: {
                    empty: dilparametreleri.cokfazlakaraktergirdiniz,
                    incorrect: dilparametreleri.cokfazlakaraktergirdiniz
                },
                between: {
                    empty: "{0}-{1}" + dilparametreleri.arasibirsayigiriniz,
                    incorrect: "{0}-{1}" + dilparametreleri.arasibirsayigiriniz
                },
                name: {empty: dilparametreleri.adinizigiriniz, incorrect: dilparametreleri.isimgecersiz},
                lastname: {empty: dilparametreleri.soyadinizigiriniz, incorrect: dilparametreleri.soyisimgecersiz},
                phone: {
                    empty: dilparametreleri.telefonnogirmenizgerekli,
                    incorrect: dilparametreleri.telefonnogecersiz
                },
                email: {empty: dilparametreleri.epostaadresigir, incorrect: dilparametreleri.girdiginepostagecersiz},
                length: {
                    empty: "Please, Enter a minimum of {0} characters and a maximum of {1}",
                    incorrect: "Incorrect. Enter a minimum of {0} characters and a maximum of {1}"
                },
                minlength: {empty: dilparametreleri.enazxkarakter, incorrect: dilparametreleri.enazxkarakter},
                maxlength: {
                    empty: "Please, enter at maximum {0} characters",
                    incorrect: "You have entered more than {0} characters"
                },
                maxfilesize: {
                    empty: "The size of one or more selected files larger than {0} {1}",
                    incorrect: "The size of one or more selected files larger than {0} {1}"
                },
                fileextension: {empty: "Select file", incorrect: "One or more files have an invalid type"}
            }, tr: {
                required: {empty: dilparametreleri._bualanidolurmakzorunlu, incorrect: dilparametreleri.gecersizbilgi},
                notzero: {empty: dilparametreleri.lutfenbirsecimyapin, incorrect: dilparametreleri.gecersizbilgi},
                integer: {empty: dilparametreleri._bualanidolurmakzorunlu, incorrect: dilparametreleri.gecersizbilgi},
                float: {
                    empty: dilparametreleri.birsayigirmenizgerekmektedir,
                    incorrect: dilparametreleri.gecersizbilgi
                },
                min: {empty: dilparametreleri.cokazkaraktergirdiniz, incorrect: dilparametreleri.cokazkaraktergirdiniz},
                max: {
                    empty: dilparametreleri.cokfazlakaraktergirdiniz,
                    incorrect: dilparametreleri.cokfazlakaraktergirdiniz
                },
                between: {
                    empty: "{0}-{1}" + dilparametreleri.arasibirsayigiriniz,
                    incorrect: "{0}-{1}" + dilparametreleri.arasibirsayigiriniz
                },
                name: {empty: dilparametreleri.adinizigiriniz, incorrect: dilparametreleri.isimgecersiz},
                lastname: {empty: dilparametreleri.soyadinizigiriniz, incorrect: dilparametreleri.soyisimgecersiz},
                phone: {
                    empty: dilparametreleri.telefonnogirmenizgerekli,
                    incorrect: dilparametreleri.telefonnogecersiz
                },
                email: {empty: dilparametreleri.epostaadresigir, incorrect: dilparametreleri.girdiginepostagecersiz},
                length: {
                    empty: "Please, Enter a minimum of {0} characters and a maximum of {1}",
                    incorrect: "Incorrect. Enter a minimum of {0} characters and a maximum of {1}"
                },
                minlength: {empty: dilparametreleri.enazxkarakter, incorrect: dilparametreleri.enazxkarakter},
                maxlength: {
                    empty: "Please, enter at maximum {0} characters",
                    incorrect: "You have entered more than {0} characters"
                },
                maxfilesize: {
                    empty: "The size of one or more selected files larger than {0} {1}",
                    incorrect: "The size of one or more selected files larger than {0} {1}"
                },
                fileextension: {empty: "Select file", incorrect: "One or more files have an invalid type"}
            }
        }, rules: {
            required: function (e) {
                return "" !== e
            }, notzero: function (e) {
                return 0 < parseInt(e, 10)
            }, integer: function (e) {
                return new RegExp(/^[0-9]+$/gi).test(e)
            }, float: function (e) {
                return e = e.toString().replace(/\,/, "."), this.integer(e) || new RegExp(/^([0-9])+(\.)([0-9]+$)/gi).test(e)
            }, min: function (e, r) {
                return this.float(e) ? parseFloat(e) >= parseFloat(r[0]) : parseInt(e, 10) >= parseInt(r[0], 10)
            }, max: function (e, r) {
                return this.float(e) ? parseFloat(e) <= parseFloat(r[0]) : parseInt(e, 10) <= parseInt(r[0], 10)
            }, between: function (e, r) {
                return r[1] = r[1] || 999999, this.float(e) ? parseFloat(e) >= parseFloat(r[0]) && parseFloat(e) <= parseFloat(r[1]) : !!this.integer(e) && parseInt(e, 10) >= parseInt(r[0], 10) && parseInt(e, 10) <= parseInt(r[1], 10)
            }, name: function (e) {
                return !(0 < e.trim().length && e.trim().length < 2) && new RegExp(/^[a-zA-ZöçşiğüıIĞÜİŞÇÖ\sа-яА-ЯёЁ\-]+$/g).test(e.trim())
            }, lastname: function (e) {
                return this.name(e.trim())
            }, phone: function (e) {

                if(e.length < 5)
                    return false;

                return !(e.replace(/[^0-9]+/gi, "").match(/[0-9]+/gi) && e.replace(/[^0-9]+/gi, "").match(/[0-9]+/gi)[0].length < 6) && new RegExp(/^(?:(?:\(?(?:00|\+)([1-4]\d\d|[1-9]\d?)\)?)?[\-\ \\\/]?)?((?:\(?\d{1,}\)?[\-\ \\\/]?){0,})(?:[\-\ \\\/]?(?:#|ext\.?|extension|x)[\-\ \\\/]?(\d+))?$/g).test(e)
            }, email: function (e) {
                return new RegExp(/^(("[\w-\s]+")|([\w\-]+(?:\.[\w\-]+)*)|("[\w-\s]+")([\w\-]+(?:\.[\w\-]+)*))(@((?:[\w\-]+\.)*\w[\w\-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$)|(@\[?((25[0-5]\.|2[0-4][0-9]\.|1[0-9]{2}\.|[0-9]{1,2}\.))((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){2}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\]?$)/i).test(e)
            }, length: function (e, r) {
                return this.between(e.replace(/\s{2,}/g, " ").length, r)
            }, maxlength: function (e, r) {
                return this.max(e.replace(/\s{2,}/g, " ").length, r)
            }, minlength: function (e, r) {
                return this.min(e.replace(/\s{2,}/g, " ").length, r)
            }, maxfilesize: function (e, r) {
                var t, i = e.length, a = 1;
                switch (r[1].toLowerCase()) {
                    case"b":
                        a = 1;
                        break;
                    case"kb":
                        a = 1024;
                        break;
                    case"mb":
                        a = 1048576;
                        break;
                    case"gb":
                        a = 1073741824;
                        break;
                    case"tb":
                        a = 1099511627776
                }
                for (t = 0; t < i; t += 1) if (parseFloat(e[t]) > parseFloat(r[0]) * a) return !1;
                return !0
            }, fileextension: function (e, r) {
                for (var t, i = r.length, a = e.length, n = 0, s = 0; s < i; s += 1) for (t = 0; t < a; t += 1) r[s] === e[t].split(".").pop() && (n += 1);
                return e.length === n
            }
        }, orderFields: function (r, t) {
            var i = this, a = {};
            return r && t && Object.keys(this.fields).forEach(function (e) {
                i.fields[e].handle[r] && i.fields[e].handle[r] === t && (a[e] = i.fields[e])
            }), a
        }, _eventSubmit: function (e) {
            e.preventDefault(), this.hideErrors(!1, !0), this.validate() || this.showErrors(), !0 === this.submitCallback(this.errors || null, !this.errors) && this.formHandle.submit()
        }, _eventChange: function (e) {
            var r, t = this;
            this.settings.removeSpaces && new RegExp(/\s{2,}/g).test(e.target.value) && (e.target.value = e.target.value.replace(/\s{2,}/g, " ")), "radio" === e.target.type ? (r = this.orderFields("name", e.target.name), Object.keys(r).forEach(function (e) {
                t.hideErrors(r[e].handle)
            })) : this.hideErrors(e.target), this.validate(e.target) || (this.showErrors(e.target), this.settings.showErrors || this.submitCallback(this.errors, !1))
        }, _eventChangeWithDelay: function (e) {
            var r = this;
            this.intervalID && clearTimeout(this.intervalID), this.intervalID = setTimeout(function () {
                r._eventChange.apply(r, [e])
            }, 400)
        }, applySettings: function (i) {
            var a = this;
            return i.rules && Object.keys(i.rules).forEach(function (e) {
                a.rules[e] = i.rules[e]
            }), i.messages && Object.keys(i.messages).forEach(function (t) {
                Object.keys(i.messages[t]).forEach(function (r) {
                    Object.keys(i.messages[t][r]).forEach(function (e) {
                        a.settings.messages[t] = a.settings.messages[t] || {}, a.settings.messages[t][r] = a.settings.messages[t][r] || {}, a.settings.messages[t][r][e] = i.messages[t][r][e]
                    })
                })
            }), Object.keys(i).forEach(function (e) {
                a.settings[e] = i[e]
            }), this
        }, getFields: function (r) {
            var t = {}, i = [], a = [];
            return r = r || this.formHandle.querySelectorAll("[data-rule]"), Object.keys(r).forEach(function (e) {
                i = r[e].getAttribute("data-rule").split("|"), Object.keys(i).forEach(function (e) {
                    i[e].match(/-/gi) ? (a = i[e].split("-"), i[e] = a[0], a = a.splice(1), i[e] = [i[e], a]) : i[e] = [i[e], []]
                }), t[e] = {
                    name: r[e].getAttribute("name"),
                    rules: i,
                    defaultValue: r[e].getAttribute("data-default"),
                    handle: r[e],
                    intervalID: null
                }
            }), t
        }, validate: function (e) {
            var a, n, s, l, o, c, m = this, h = e ? this.getFields([e]) : this.fields, d = null;
            return this.errors = this.errors ? null : this.errors, Object.keys(h).forEach(function (i) {
                a = !0, h[i].rules && Object.keys(h[i].rules).forEach(function (e) {
                    switch (n = h[i].rules[e][0], s = h[i].rules[e][1], l = h[i].defaultValue, o = h[i].handle.value, h[i].handle.type) {
                        case"checkbox":
                            h[i].handle.checked || (o = "");
                            break;
                        case"radio":
                            var r = m.orderFields("name", h[i].handle.name), t = !1;
                            Object.keys(r).forEach(function (e) {
                                r[e].handle.checked && (t = !0)
                            }), t || (Object.keys(r).forEach(function (e) {
                                try {
                                    c = m.settings.messages[m.settings.locale][n].empty
                                } catch (e) {
                                    c = m.messages[m.settings.locale][n].empty
                                }
                            }), o = "");
                            break;
                        case"file":
                            h[i].handle.files && h[i].handle.files.length && (o = [], Object.keys(h[i].handle.files).forEach(function (e) {
                                switch (n) {
                                    case"maxfilesize":
                                        o.push(h[i].handle.files[e].size);
                                        break;
                                    case"fileextension":
                                        o.push(h[i].handle.files[e].name)
                                }
                            }))
                    }
                    if (a && ("" !== o || h[i].rules.join("|").match(/\|{0,1}required\|{0,1}/))) if (a && l && o !== l ? (a = !1, d = "incorrect") : a && m.rules[n] && !m.rules[n](o, s) && (d = "" === o ? (a = !1, "empty") : (a = !1, "incorrect")), a) m.hideErrors(h[i].handle, !0); else {
                        m.errors = m.errors || {};
                        try {
                            try {
                                c = m.settings.messages[m.settings.locale][n][d]
                            } catch (e) {
                                c = m.messages[m.settings.locale][n][d]
                            }
                        } catch (e) {
                            n = "required", c = m.messages.en[n][d]
                        }
                        s.length || s.push(o), m.errors[i] = {
                            name: h[i].name,
                            errorText: m.formatString(c, s)
                        }, m.submitCallback || (m.errors[i].handle = h[i].handle)
                    }
                })
            }), this.submitCallback ? !this.errors : this.errors || !0
        }, hideErrors: function (r, t) {
            var i, a = this;
            Object.keys(this.fields).forEach(function (e) {
                (r && r === a.fields[e].handle || !r) && (i = a.fields[e].handle.nextElementSibling, t && a.fields[e].handle.classList.remove(a.settings.errorClassName), i && "validator-error" === i.getAttribute("data-type") && i.parentNode.removeChild(i))
            })
        }, showErrors: function (t) {
            function i(e, r) {
                e.classList.add(n.settings.errorClassName), e.nextElementSibling && "validator-error" === e.nextElementSibling.getAttribute("data-type") || n.settings.showErrors && ((a = document.createElement("div")).setAttribute("class", n.settings.errorClassName), a.setAttribute("data-type", "validator-error"), a.innerHTML = r.errorText, e.parentNode.insertBefore(a, e.nextSibling))
            }

            var a, n = this;
            Object.keys(this.errors).forEach(function (r) {
                t ? Object.keys(n.fields).forEach(function (e) {
                    n.fields[e].handle.getAttribute("name") === t.getAttribute("name") && i(n.fields[e].handle, n.errors[r])
                }) : ("0" === r || 0 < r && n.fields[r].name !== n.fields[r - 1].name) && i(n.fields[r].handle, n.errors[r])
            }), this.settings.autoHideErrors && (t ? (t.intervalID && clearTimeout(t.intervalID), this.intervalID || (t.intervalID = setTimeout(function () {
                t.intervalID = null, n.hideErrors(t)
            }, this.settings.autoHideErrorsTimeout))) : (this.intervalID && clearTimeout(this.intervalID), this.intervalID = setTimeout(function () {
                n.intervalID = null, n.hideErrors(!1)
            }, this.settings.autoHideErrorsTimeout)))
        }, getFormHandle: function () {
            return this.formHandle
        }, formatString: function (e, t) {
            return e.replace(/\{(\d+)\}/gi, function (e, r) {
                return e && t[r] ? t[r] : ""
            })
        }, destroy: function () {
            this.hideErrors(!1, !0), this.eventsBuilder("removeEventListener")
        }, reload: function (e, r) {
            switch (this.destroy(), arguments.length) {
                case 2:
                    this.submitCallback = e, this.settings = r;
                    break;
                case 1:
                    this.settings = e
            }
            this.fields = this.getFields(this.formHandle.querySelectorAll("[data-rule]")), this.submitCallback && this.eventsBuilder("addEventListener"), this.applySettings(r || {})
        }, eventsBuilder: function (t) {
            var i = this;
            this.formHandle[t]("submit", this._eventSubmit), this.settings.onAir && Object.keys(this.fields).forEach(function (r) {
                [].forEach.call(i.settings.eventsList, function (e) {
                    "keyup" === e ? i.fields[r].handle[t](e, i._eventChangeWithDelay) : i.fields[r].handle[t](e, i._eventChange)
                })
            })
        }
    }, e.Validator = function () {
        function r() {
        }

        var e, t, i = (t = arguments, a.prototype = (e = n).prototype, new a);

        function a() {
            return e.apply(this, t)
        }

        return r.prototype = {}, [].forEach.call(s, function (e) {
            r.prototype[e] = function () {
                return i[e].apply(i, arguments)
            }
        }), new r
    }
}(this);